// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrepWise.Infrastructure.Data;

#nullable disable

namespace PrepWise.Infrastructure.Migrations
{
    [DbContext(typeof(PrepWiseDbContext))]
    [Migration("20250731020258_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrepWise.Core.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Response")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.MockTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("MockTestAttemptId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeSpent")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("MockTestAttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("MockTestAnswers");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.MockTestAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeTaken")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int>("UnansweredQuestions")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MockTestAttempts");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("QuestionTextTamil")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionTextTamil")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizAttemptId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeSpent")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeTaken")
                        .HasColumnType("time");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int>("UnansweredQuestions")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.SkillScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SkillScores");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(4917),
                            Description = "Standard 6th to 10th Tamil",
                            IsActive = true,
                            Name = "Tamil Subject Quiz"
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5518),
                            Description = "Tamil Grammar, Literature, Comprehension and Vocabulary",
                            IsActive = true,
                            Name = "Tamil Grammar"
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5520),
                            Description = "Mathematical Simplification",
                            IsActive = true,
                            Name = "Simplification"
                        },
                        new
                        {
                            Id = 4,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5521),
                            Description = "Percentage Calculations",
                            IsActive = true,
                            Name = "Percentage"
                        },
                        new
                        {
                            Id = 5,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5522),
                            Description = "Highest Common Factor and Least Common Multiple",
                            IsActive = true,
                            Name = "HCF and LCM"
                        },
                        new
                        {
                            Id = 6,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5523),
                            Description = "Ratio and Proportion Problems",
                            IsActive = true,
                            Name = "Ratio and Proportion"
                        },
                        new
                        {
                            Id = 7,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5524),
                            Description = "Area and Volume Calculations",
                            IsActive = true,
                            Name = "Area and Volume"
                        },
                        new
                        {
                            Id = 8,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5525),
                            Description = "Physics, Chemistry, Biology",
                            IsActive = true,
                            Name = "General Science"
                        },
                        new
                        {
                            Id = 9,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5526),
                            Description = "Current Affairs and Events",
                            IsActive = true,
                            Name = "Current Events"
                        },
                        new
                        {
                            Id = 10,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5526),
                            Description = "Indian and World Geography",
                            IsActive = true,
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 11,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5527),
                            Description = "Indian History and Culture",
                            IsActive = true,
                            Name = "History and Culture"
                        },
                        new
                        {
                            Id = 12,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 7, 31, 2, 2, 58, 219, DateTimeKind.Utc).AddTicks(5528),
                            Description = "Indian Constitution and Politics",
                            IsActive = true,
                            Name = "Indian Polity"
                        });
                });

            modelBuilder.Entity("PrepWise.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.MockTestAnswer", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.MockTestAttempt", "MockTestAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("MockTestAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.QuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MockTestAttempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.MockTestAttempt", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.User", "User")
                        .WithMany("MockTestAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Question", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuestionOption", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Quiz", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizAnswer", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.QuizAttempt", "QuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.QuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizAttempt", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Quiz", "Quiz")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.User", "User")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizQuestion", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.SkillScore", b =>
                {
                    b.HasOne("PrepWise.Core.Entities.Subject", "Subject")
                        .WithMany("SkillScores")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrepWise.Core.Entities.User", "User")
                        .WithMany("SkillScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.MockTestAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Quiz", b =>
                {
                    b.Navigation("QuizAttempts");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.QuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SkillScores");
                });

            modelBuilder.Entity("PrepWise.Core.Entities.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("MockTestAttempts");

                    b.Navigation("QuizAttempts");

                    b.Navigation("SkillScores");
                });
#pragma warning restore 612, 618
        }
    }
}
